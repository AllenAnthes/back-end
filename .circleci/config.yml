version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@4.0.1
  aws-ecs: circleci/aws-ecs@0.0.8

workflows:
  build_test_deploy:
    jobs:
      - build_test

      - dockerhub_build_and_push:
          requires:
            - build_test
          filters:
            branches:
              only:
                - dockerhub

      # push new Docker image to ECS
      - aws-ecr/build_and_push_image:
          repo: back-end
          # TODO: This will be dynamic once we have a prod environment
          tag: staging
          dockerfile: docker/Dockerfile
          requires:
            - build_test
          filters:
            branches:
              only:
                - master
                - staging

      # Update ECS task and service, then replace the current one
      - aws-ecs/deploy-service-update:
          # TODO: This will be dynamic once we have a prod environment
          family: 'backend-staging'
          service-name: 'backend-staging'
          cluster-name: 'python-oc-services'
          verify-revision-is-deployed: true
          requires:
            - aws-ecr/build_and_push_image
          filters:
            branches:
              only:
                - master
                - staging


jobs:
  build_test:
    docker:
      - image: circleci/python:3.7.1
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          CC_TEST_REPORTER_ID: 91944b115a88fcc2040da46325f3606d096c281149ab4fcff022f06b09a700c0

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin

      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages

      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}

      - run:
          name: Installing dependencies
          command: |
            sudo pip install poetry
            poetry install
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > /usr/local/bin/cc-test-reporter
            chmod +x /usr/local/bin/cc-test-reporter

      - run:
          name: Initializing CodeClimate
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > /usr/local/bin/cc-test-reporter
            chmod +x /usr/local/bin/cc-test-reporter
            /usr/local/bin/cc-test-reporter before-build

      - save_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - "/home/circleci/.cache/pypoetry/virtualenvs"
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"

      # Run tests
      - run:
          name: Run Pytest
          command: |
            poetry run coverage run --omit="/home/circleci/.cache/pypoetry/virtualenvs/*" -m pytest --junitxml=test-results/pytest/results.xml

      - run:
          name: Run linting and coverage
          command: |
            poetry run flake8 .
            poetry run black --check --diff src
            poetry run coverage report
            poetry run coverage xml
            /usr/local/bin/cc-test-reporter after-build -t coverage.py

      - run:
          name: Run Bandit security analysis
          command: |
            poetry run bandit -r .

      - store_test_results:
          path: test-results

  dockerhub_build_and_push:
    docker:
      - image: circleci/python:3.7.1

    steps:
      - checkout

      - setup_remote_docker

      - run:
          name: Build and push to DockerHub
          command: |
            docker build -t operationcode/back-end -f docker/Dockerfile .
            echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
            docker push operationcode/back-end